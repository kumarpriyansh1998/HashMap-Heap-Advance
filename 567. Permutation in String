class Solution {
    public boolean checkInclusion(String p , String s) {
        
        if(p.length()>s.length()) return false;
        HashMap<Character,Integer> map1 = new HashMap<>();
        for(int i=0;i<p.length();i++){
            char ch = p.charAt(i);
            map1.put(ch,map1.getOrDefault(ch,0)+1);
        }
        
        
        
        HashMap<Character,Integer> map2 = new HashMap<>();
        int m = p.length();
        int n = s.length();
        
        for(int i=0;i<m-1;i++){
            char ch = s.charAt(i);
            map2.put(ch,map2.getOrDefault(ch,0)+1);
        }
        
        
        
        int i=m-1;
       
        while(i<n){
           
            char ch = s.charAt(i);
            map2.put(ch,map2.getOrDefault(ch,0)+1);
       
            if(isanagram(map1,map2)){
                
                return true;
            }
            
            int freq = map2.get(s.charAt(i-m+1));
            if(freq==1){
                map2.remove(s.charAt(i-m+1));
            }
            else{
                map2.put(s.charAt(i-m+1),freq-1);
            }
           
            
          
            i++;
            
        }
        
        return false;
        
    }
    
        public boolean isanagram(HashMap<Character,Integer> map1,HashMap<Character,Integer> map2){
        if(map1.size()!=map2.size()) return false;
        for(Character c:map1.keySet()){
            if(map2.containsKey(c)==false) return false;
            if(!map1.get(c).equals(map2.get(c))) return false;
        }
        return true;
    }
}
